#!/usr/bin/env node

const fs = require("fs").promises;

const SCHEMA_COLORS_TEMPLATE_FILE = "src/config/schemaColors.json.template";
const TABLES_INDEX_FILE_TEMPLATE = "src/config/tables.ts.template";
const DATABASES_FILE = "src/config/databases.json";

const DATA_TYPES = {
  "character varying": "text",
  "timestamp without time zone": "timestamp"
}

const adjustDataTypeName = (rawName) => {
  if(DATA_TYPES[rawName]) {
    return DATA_TYPES[rawName];
  } else {
    return rawName;
  }
};

const readTableData = async (databaseName) => {
  const schema = await fs.readFile(`${databaseName}.csv`, "utf8");

  const schemaData = schema.replaceAll('"', '').trim().split("\n").map(row => row.split(","));
  const [headers] = schemaData.splice(0, 1);

  const data = schemaData.map(row => {
    return Object.fromEntries(headers.map((key, index) => [key, row[index]]));
  });

  data.map(o => o.data_type = adjustDataTypeName(o.data_type));

  return data;
};

const importSchemaColors = async (databaseName, schemas) => {
  const schemasTemplateFile = await fs.readFile(SCHEMA_COLORS_TEMPLATE_FILE, "utf8");
  const defaultSchemaColors = JSON.parse(schemasTemplateFile);
  let schemaColors = Object.keys(schemas).reduce((acc, schemaName) => {
    acc[schemaName] = defaultSchemaColors.DEFAULT;
    return acc;
  }, {});

  schemaColors = {
    ...defaultSchemaColors,
    ...schemaColors
  };

  await fs.writeFile(`src/config/databases/${databaseName}/schemaColors.json`, JSON.stringify(schemaColors, null, 2), "utf8");
};

const importTablePositions = async (databaseName, tables) => {
  const tableCount = Object.keys(tables).length;
  const tablesPerRow = Math.round(Math.sqrt(tableCount));

  const tablePositions = Object.keys(tables).reduce((acc, tableName, index) => {
    const fullTableName = tableName.includes(".") ? tableName : `public.${tableName}`;

    const yPosition = Math.floor(index / tablesPerRow);
    const xPosition = index % tablesPerRow;

    acc[fullTableName] = {
      x: xPosition * 300,
      y: yPosition * 450
    };
    return acc;
  }, {});

  await fs.writeFile(`src/config/databases/${databaseName}/tablePositions.json`, JSON.stringify(tablePositions, null, 2), "utf8");
};

const importTableConfigs = async (databaseName, tables) => {
  await fs.mkdir(`src/config/databases/${databaseName}/tables`);

  Object.keys(tables).forEach(async tableName => {
    const tableFile = `src/config/databases/${databaseName}/tables/${tableName}.json`;
    const tableConfig = {
      name: tableName,
      description: "",
      schemaColor: "#91C4F2",
      columns: []
    };

    tables[tableName].forEach(row => {
      const columnName = row[0];
      const columnType = row[1];

      tableConfig.columns.push({
        name: columnName,
        description: "",
        type: columnType
      });
    });

    await fs.writeFile(tableFile, JSON.stringify(tableConfig, null, 2), "utf8");
  });
};

// https://ourcodeworld.com/articles/read/608/how-to-camelize-and-decamelize-strings-in-javascript
const camelize = (text) => {
  return text.replace(/\W/, "-").replace(/^([A-Z])|[\s-_]+(\w)/g, function(match, p1, p2, offset) {
      if (p2) return p2.toUpperCase();
      return p1.toLowerCase();
  });
};

const importEdgeConfigs = async (databaseName, tables) => {
  await fs.writeFile(`src/config/databases/${databaseName}/edges.json`, JSON.stringify([], null, 2), "utf8");
};

const importTablesIndexFile = async (databaseName, tables) => {
  const importStatements = [];
  const names = [];

  Object.keys(tables).forEach(tableName => {
    const tableConfigFileName = `${camelize(tableName)}Table`;

    importStatements.push(`import ${tableConfigFileName} from "./tables/${tableName}.json";`);
    names.push(`  ${tableConfigFileName}`);
  });

  const loadTablesTemplate = await fs.readFile(TABLES_INDEX_FILE_TEMPLATE, "utf8");
  const loadTablesHelper = loadTablesTemplate
    .replace("%TABLE_FILES%", importStatements.join("\n"))
    .replace("%TABLE_NAMES%", names.join(",\n"))

  await fs.writeFile(`src/config/databases/${databaseName}/tables.ts`, loadTablesHelper, "utf8");
};

const addDatabaseEntry = async (databaseName) => {
  const rawDatabases = await fs.readFile(DATABASES_FILE, "utf8");
  const databases = JSON.parse(rawDatabases);

  databases[databaseName] = {
    name: databaseName,
    description: ""
  }

  await fs.writeFile(DATABASES_FILE, JSON.stringify(databases, null, 2), "utf8");
};

const importConfigFiles = async ({ databaseName }) => {
  const databaseConfigFolder = `src/config/databases/${databaseName}`;
  await fs.mkdir(databaseConfigFolder);

  const tableData = await readTableData(databaseName);
  const tables = {};
  const schemas = {};

  tableData.forEach(row => {
    schemas[row.table_schema] = true;

    const name = row.table_schema === "public" ? row.table_name : `${row.table_schema}.${row.table_name}`;

    if(tables[name]) {
      tables[name].push([row.column_name, row.data_type]);
    } else {
      tables[name] = [[row.column_name, row.data_type]];
    }
  });

  await importSchemaColors(databaseName, schemas);
  await importTablePositions(databaseName, tables);
  await importTableConfigs(databaseName, tables);
  await importEdgeConfigs(databaseName, tables);
  await importTablesIndexFile(databaseName, tables);
  await addDatabaseEntry(databaseName);
};

(async () => {
  const databaseName = process.argv[2];
  if(!databaseName) {
    console.log("--> Provide a database name like 'npm run import foobar'");
    return;
  }

  const databaseConfigFolder = `src/config/databases/${databaseName}`;
  try {
    if(await fs.stat(databaseConfigFolder)) {
      console.log(`⚠️  Folder ${databaseConfigFolder} already exists.`);
      return;
    }
  } catch {}

  const readline = require("readline").createInterface({
    input: process.stdin,
    output: process.stdout
  });

  readline.question("Do you want to import schema from a CSV file? y/n\n", async (answer) => {
    if(answer.toLowerCase().includes("y")) {
      await importConfigFiles({ databaseName });

      console.log("Roger, everything is imported.");
    } else {
      console.log("Roger, skipping importing.");
    }

    readline.close();
  });
})();
